var inProgressThisSession = false;
var reviewerWasSet = false;

function onLoad(executionContext) {
    var formContext = executionContext.getFormContext();

    reviewerWasSet = formContext.getAttribute("cp_reviewer").getValue() != null;

    lockCreateOnlyFields(executionContext);

    setTabState(executionContext);

    setSnapshotsUiState(executionContext);

    setAppointmentUiState(executionContext);

    formContext.getAttribute("cp_type").addOnChange(onChangeType);
    onChangeType(executionContext);

    formContext.getAttribute("cp_category").addOnChange(onChangeCategory);
    onChangeCategory(executionContext);

    formContext.getAttribute("cp_reviewer").addOnChange(onChangeReviewer);
    onChangeReviewer(executionContext);

    formContext.getAttribute("cp_reviewerconsultationdatetime").addOnChange(onChangeConsultedOn);
    onChangeConsultedOn(executionContext);

    formContext.getAttribute("cp_furtheractionsrequired").addOnChange(onChangeFurtherActionsRequired);
    onChangeFurtherActionsRequired(executionContext, true);

    formContext.getAttribute("cp_nextstepsfollowup").addOnChange(onChangeNextStepsFollowUp);
    onChangeNextStepsFollowUp(executionContext);

    formContext.getAttribute("cp_reviewmeetingstatus").addOnChange(onChangeMeetingStatus);
    if (formContext.getAttribute("cp_reviewmeetingstatus").getValue() == 778230001 /* In Progress */ && currentUserIsReviewer(formContext)) {
        inProgressThisSession = true;
        setMeetingInProgress(executionContext);
    } else {
        inProgressThisSession = false;
        onChangeMeetingStatus(executionContext, true);
    }

    formContext.getAttribute("statuscode").addOnChange(onChangeStatusReason);
    onChangeStatusReason(executionContext);

    formContext.getAttribute("cp_participantresponse").addOnChange(onChangeParticipantResponse);
    onChangeParticipantResponse(executionContext);

    formContext.getAttribute("cp_notifyparticipant").setSubmitMode("never");
    formContext.getAttribute("cp_notifyparticipant").addOnChange(onChangeNotifyParticipant);
    onChangeNotifyParticipant(executionContext);

    formContext.getAttribute("cp_notifyreviewer").setSubmitMode("never");
    formContext.getAttribute("cp_notifyreviewer").addOnChange(onChangeNotifyReviewer);
    onChangeNotifyReviewer(executionContext);

    // ***** Fields which should NOT have their change functions invoked during load *******
    formContext.getAttribute("cp_name").addOnChange(onChangeReference);
    formContext.getAttribute("modifiedon").addOnChange(onChangeModifiedOn);

    formContext.data.entity.addOnSave(onSave);

    setFocus(executionContext);

    if (currentUserIsParticipant(formContext)) {
        formContext.ui.process.setVisible(false);
        //Auto-refresh Participant's read-only form view.
        checkForBackgroundChanges(executionContext, onBackgroundChange, 2000, "modifiedon", "participantViewBackgroundChange");
    }

    formContext.getControl("cp_category").addPreSearch(categoryPreSearch);

    formContext.getAttribute("cp_complainantengagementdatetime").addOnChange(preventFutureDate);
    formContext.getAttribute("cp_reviewerconsultationdatetime").addOnChange(preventFutureDate);
    formContext.getAttribute("cp_reflectivereviewstartedon").addOnChange(preventFutureDate);
    formContext.getAttribute("cp_reflectivereviewendedon").addOnChange(preventFutureDate);
    formContext.getAttribute("cp_nextstepsfollowupdate").addOnChange(preventPastDate);
}

function setFocus(executionContext) {
    var formContext = executionContext.getFormContext();

    if (currentUserIsParticipant(formContext) || formContext.getAttribute("cp_reviewmeetingstatus").getValue() != null) {
        formContext.ui.tabs.get("tabReflectiveReview").setFocus();
    } else {
        formContext.ui.tabs.get("tabAdmin").setFocus();
        setFocusOnNextRequiredField(executionContext);
    }
}

var currentFocusControl = null;
function setFocusOnNextRequiredField(executionContext) {
    var formContext = executionContext.getFormContext();

    if (currentFocusControl != null &&
            currentFocusControl.getAttribute().getAttributeType() == "datetime" &&
            currentFocusControl.getAttribute().getValue() == null) {
        return;
    }

    var done = false;
    formContext.ui.controls.forEach(
        function (control, index) {
            if (!done && control.getAttribute !== undefined &&
                    control != currentFocusControl &&
                    control.getAttribute().getRequiredLevel() != "none" && 
                    control.getAttribute().getValue() == null) {

                control.setFocus();
                if (currentFocusControl != null) {
                    currentFocusControl.getAttribute().removeOnChange(setFocusOnNextRequiredField);
                }
                currentFocusControl = control;
                currentFocusControl.getAttribute().addOnChange(setFocusOnNextRequiredField);
                done = true;
            }
        }
    );
}

function onSave(executionContext) {
    var formContext = executionContext.getFormContext();

    var meetingInProgress = (formContext.getAttribute("cp_reviewmeetingstatus").getValue() == 778230001 /* In Progress */);
    var eventArgs = executionContext.getEventArgs();
    var saveMode = eventArgs.getSaveMode();

    if (meetingInProgress && saveMode == 70) {
        eventArgs.preventDefault();
        return;
    }

    if (meetingInProgress && saveMode == 2 /* Includes Close */) {
        eventArgs.preventDefault();
        alert("You should not close the form whilst the meeting is in progress. Choose End Meeting to end the meeting before closing the form.");
    }
}

function onChangeModifiedOn(executionContext) {
    //This event means the form was saved.
    var formContext = executionContext.getFormContext();

    var meetingInProgress = (formContext.getAttribute("cp_reviewmeetingstatus").getValue() == 778230001 /* In Progress */);

    if (inProgressThisSession && !meetingInProgress) {
        //Just saved end meeting.
        inProgressThisSession = false;
        onChangeMeetingStatus(executionContext, true);
    } else if (inProgressThisSession && meetingInProgress) {
        //Just saved whilst meeting in progress. TODO: Make the form dirty again to trigger the onSave prompt about exiting whilst in progress.

    }

    setSnapshotsUiState(executionContext);

    reviewerWasSet = formContext.getAttribute("cp_reviewer").getValue() != null;
    setAppointReviewerUiState(executionContext);
    setReviewerNotification(executionContext);
}

//function appendToDebugLog(executionContext, logItem) {
//    var formContext = executionContext.getFormContext();

//    var log = formContext.getAttribute("cp_debuglog").getValue();
//    if (log == null) {
//        log = logItem;
//    } else {
//        log += "\n" + logItem;
//    }
//    formContext.getAttribute("cp_debuglog").setSubmitMode("never");
//    formContext.getAttribute("cp_debuglog").setValue(log);
//}

function preventPastDate(executionContext) {
    var formContext = executionContext.getFormContext();

    var attribute = executionContext.getEventSource();

    formContext.getControl(attribute.getName()).clearNotification("PastNotAllowed");
    if (attribute.getValue() < new Date()) {
        formContext.getControl(attribute.getName()).setNotification("Cannot be in the past.", "PastNotAllowed");
    }
}

function preventFutureDate(executionContext) {
    var formContext = executionContext.getFormContext();

    var attribute = executionContext.getEventSource();

    formContext.getControl(attribute.getName()).clearNotification("FutureNotAllowed");
    if (attribute.getValue() > new Date()) {
        formContext.getControl(attribute.getName()).setNotification("Cannot be in the future.", "FutureNotAllowed");
    }
}

function hasCurrentUserRole(roleName) {
    var hasRole = false;
    var roles = Xrm.Utility.getGlobalContext().userSettings.roles;
    roles.forEach(x => {
        //Compare by name, not id because roles are dynamically created for each Business Unit on target Orgs 
        //(so we only know the id of the role deployed in a solution but not the copies applied dynamically at BU level).
        if (x.name === roleName) {
            hasRole = true;
            return;
        }
    });
    return hasRole;
}

function isReadOnly(executionContext) {
    var formContext = executionContext.getFormContext();

    var formType = formContext.ui.getFormType();
    return (formType == 3 /* Read Only */ || formType == 4 /* Disabled */);
}

function currentUserIsParticipant(formContext) {
    var participant = formContext.getAttribute("cp_participant").getValue();
    return (participant != null && participant[0].id == Xrm.Utility.getGlobalContext().userSettings.userId);
}

function currentUserIsReviewer(formContext) {
    var reviewer = formContext.getAttribute("cp_reviewer").getValue();
    return (reviewer != null && reviewer[0].id == Xrm.Utility.getGlobalContext().userSettings.userId);
}

function lockCreateOnlyFields(executionContext) {
    var formContext = executionContext.getFormContext();

    var isCreate = (formContext.ui.getFormType() == 1 /* Create */);
    formContext.getControl("cp_participant").setDisabled(!isCreate);
    formContext.getControl("cp_name").setDisabled(!isCreate);
    formContext.getControl("cp_type").setDisabled(!isCreate);
    if (isCreate) {
        filterTypesForUser(executionContext);
    }
}

function lockFieldsPostReviewMeeting(executionContext) {
    var formContext = executionContext.getFormContext();

    var statusReason = formContext.getAttribute("statuscode").getValue();
    var participantAccepted = (formContext.getAttribute("cp_participantresponse").getValue() == 1);
    var awaitingParticipantResponse = (statusReason == 778230002 /* Awaiting Participant Acceptance */);

    //Locked whilst awaiting or having Participant acceptance unless having another review.
    var lockCircumstances = (awaitingParticipantResponse || 
        (participantAccepted && statusReason != 778230005 /* Review Required */ && statusReason != 778230001 /* Meeting Scheduled */));

    formContext.getControl("cp_detailscircumstancesleadingtorprp").setDisabled(lockCircumstances);
    formContext.getControl("cp_complainantsexpectations").setDisabled(lockCircumstances);

    formContext.ui.clearFormNotification("acceptOrRejectNotification");
    formContext.ui.clearFormNotification("isLockedNotification");
    if (currentUserIsParticipant(formContext)) {
        if (awaitingParticipantResponse) {
            formContext.ui.setFormNotification(
                "Please select Accept or Reject.",
                "INFO",
                "acceptOrRejectNotification"
            );
        }
    } else if (lockCircumstances) {
        formContext.ui.setFormNotification(
            "Some fields are locked as the review meeting has been completed. Request or schedule another review to unlock them.",
            "INFO",
            "isLockedNotification"
        );
    }
}

function setReviewerNotification(executionContext) {
    var formContext = executionContext.getFormContext();

    formContext.ui.clearFormNotification("noReviewerNotification");
    var isCreate = (formContext.ui.getFormType() == 1 /* Create */);
    if (!isCreate && formContext.getAttribute("cp_reviewer").getValue() == null) {
        formContext.ui.setFormNotification(
            "A Reviewer must be saved to progress this RPRP.",
            "WARNING",
            "noReviewerNotification"
        );
    }
}

var originalAppointmentName = null;
function setAppointmentUiState(executionContext) {
    var formContext = executionContext.getFormContext();

    formContext.getControl("cp_reflectivereviewappointment").setVisible(false);

    var appointment = formContext.getAttribute("cp_reflectivereviewappointment").getValue();
    if (appointment != null) {
        if (formContext.getAttribute("cp_reviewmeetingstatus").getValue() == 778230000 /* Scheduled */) {
            if (!currentUserIsParticipant(formContext)) {
                //Provide reschedule link via Appointment lookup name.
                if (originalAppointmentName == null) originalAppointmentName = appointment[0].name;
                appointment[0].name = "[CLICK HERE TO RESCHEDULE]";
                formContext.getAttribute("cp_reflectivereviewappointment").setValue(appointment);
                formContext.getControl("cp_reflectivereviewappointment").setVisible(true);
            }
        } else if (originalAppointmentName != null) {
            appointment[0].name = originalAppointmentName;
            formContext.getAttribute("cp_reflectivereviewappointment").setValue(appointment);
        }
    }
}

function setTabState(executionContext) {
    var formContext = executionContext.getFormContext();

    formContext.ui.tabs.forEach(
        function (tab, index) {
            tab.setVisible(!currentUserIsParticipant(formContext) || tab.getName() == "tabReflectiveReview");
        }
    );
}

var appointReviewerVisible = true;
var appointReviewerRequired = false;
function setAppointReviewerUiState(executionContext, visible, required) {
    var formContext = executionContext.getFormContext();
    if (visible === true || visible === false) appointReviewerVisible = visible;
    if (required === true || required === false) appointReviewerRequired = required;

    formContext.ui.tabs.get("tabAdmin").sections.get("sectionAppoint").setVisible(appointReviewerRequired);
    formContext.ui.tabs.get("tabAdmin").sections.get("sectionReference").controls.get("cp_reviewer").setVisible(!appointReviewerRequired);

    var consultedOnRequired = (appointReviewerVisible && appointReviewerRequired && formContext.getAttribute("cp_reviewer").getValue() != null);
    formContext.getAttribute("cp_reviewerconsultationdatetime").setRequiredLevel(consultedOnRequired ? "required" : "none");

    var reviewerRequired = (reviewerWasSet || formContext.getAttribute("cp_reviewerconsultationdatetime").getValue() != null);
    formContext.getAttribute("cp_reviewer").setRequiredLevel(reviewerRequired ? "required" : "none");
}

function setAppropriateAuthorityUiState(executionContext, visible, required) {
    var formContext = executionContext.getFormContext();
    if (visible !== true) visible = false;
    if (required !== true) required = false;

    formContext.getControl("cp_appropriateauthorityuser").setVisible(visible);
    formContext.getAttribute("cp_appropriateauthorityuser").setRequiredLevel(visible && required ? "required" : "none");
}

function setCategoryUiState(executionContext, visible, required) {
    var formContext = executionContext.getFormContext();
    if (visible !== true) visible = false;
    if (required !== true) required = false;

    if (visible) {
        //Check there are categories recorded.
        Xrm.WebApi.retrieveMultipleRecords("cp_rprpcategory", "?$select=cp_rprpcategoryid").then(
            function success(result) {
                visible = (result.entities.length > 0);
                formContext.getControl("cp_category").setVisible(visible);
                formContext.getAttribute("cp_category").setRequiredLevel(
                    (visible && required ? "required" : (visible ? "recommended" : "none")));
            },
            function (error) {
                console.log(error.message);
            }
        );
    }
}

function setSnapshotsUiState(executionContext) {
    var formContext = executionContext.getFormContext();

    if (formContext.ui.getFormType() == 1 /* Create */) {
        formContext.ui.tabs.get("tabAdmin").sections.get("sectionSnapshots").setVisible(false);
    } else {
        //Check if there are snapshots recorded.
        Xrm.WebApi.retrieveMultipleRecords("cp_rprphistory",
            "?$select=cp_rprphistoryid&$filter=cp_RPRP/cp_rprpid eq " + formContext.data.entity.getId()).then(
            function success(result) {
                formContext.ui.tabs.get("tabAdmin").sections.get("sectionSnapshots").setVisible((result.entities.length > 0));
            },
            function (error) {
                console.log(error.message);
            }
        );
    }
}

var checkForBackgroundChangesEventDictionary = {};
function checkForBackgroundChanges(executionContext, callback, pollingInterval, checkAttributeName, eventId) {
    if (executionContext === undefined || executionContext == null) {
        throw "executionContext not provided.";
    }
    var formContext = executionContext.getFormContext();
    if (typeof callback !== "function") {
        throw "callback is not a function";
    }
    if (pollingInterval === undefined) {
        pollingInterval = 3000;
    } else if (isNaN(pollingInterval)) {
        throw "pollingInterval is not a number.";
    }
    if (checkAttributeName === undefined || checkAttributeName == null) {
        checkAttributeName = "modifiedon";
    }
    if (eventId === undefined || eventId == null) eventId = checkAttributeName;

    for (var key in checkForBackgroundChangesEventDictionary) {
        if (eventId == key) {
            var value = checkForBackgroundChangesEventDictionary[key];
            if (value == "triggered") {
                return;
            } else {
                break;
            }
        }
    }
    checkForBackgroundChangesEventDictionary[eventId] = "triggered";

    Xrm.WebApi.retrieveRecord(formContext.data.entity.getEntityName(), formContext.data.entity.getId(), "?$select=" + checkAttributeName).then(
        function success(result) {
            var checkAttribute = formContext.getAttribute(checkAttributeName);
            if (checkAttribute == null) {
                alert("checkForBackgroundChanges - " + checkAttributeName + " attribute required on form!");
                return;
            }

            var equal = false;
            var attributeValue = checkAttribute.getValue();
            var resultValue = result[checkAttributeName];
            if (checkAttribute.getAttributeType() == "datetime") {
                if (attributeValue == null && resultValue == null) {
                    equal = true;
                } else if (attributeValue == null || resultValue == null) {
                    equal = false;
                } else {
                    var modifiedOnFormIso = new Date(attributeValue).toISOString();
                    var modifiedOnRetrieveIso = new Date(resultValue).toISOString();
                    equal = (modifiedOnFormIso == modifiedOnRetrieveIso);
                }
            } else {
                equal = (attributeValue == resultValue);
            }

            var repeat = (pollingInterval > 0);
            if (!equal) {
                var repeatRequested = callback(executionContext, checkAttribute, resultValue);
                repeat = (repeatRequested && repeat);
            }
            if (repeat) {
                setTimeout(
                    function (executionContext, callback, pollingInterval, checkAttributeName, eventId) {
                        checkForBackgroundChangesEventDictionary[eventId] = "repeat";
                        checkForBackgroundChanges(executionContext, callback, pollingInterval, checkAttributeName, eventId);
                    },
                    pollingInterval,
                    executionContext,
                    callback,
                    pollingInterval,
                    checkAttributeName,
                    eventId
                );
            } else {
                checkForBackgroundChangesEventDictionary[eventId] = null;
            }
        },
        function (error) {
            console.log(error.message);
        }
    );
}

function onBackgroundChange(executionContext, attribute, newValue) {
    var formContext = executionContext.getFormContext();

    if (attribute.getSubmitMode() == "never") {
        //Attributes whose submit mode is "never" are not refreshed by formContext.data.refresh so refresh explicitly.
        attribute.setValue(newValue);
        attribute.fireOnChange();
    }

    formContext.data.refresh(false).then(
        function () {
            formContext.ui.refreshRibbon(false);
            var timelineControl = formContext.getControl("Timeline");
            if (timelineControl != null) timelineControl.refresh();
        },
        function () {
        }
    );

    //Continue auto-refreshing Participant's read-only form view.
    return (currentUserIsParticipant(formContext));
}

function onChangeNotifyParticipant(executionContext) {
    var formContext = executionContext.getFormContext();

    formContext.ui.clearFormNotification("notifyParticipantInProgress");

    if (formContext.getAttribute("cp_notifyparticipant").getValue() > 0) {
        formContext.ui.setFormNotification(
            "Generation of participant notification in progress.",
            "INFO",
            "notifyParticipantInProgress"
        );
        checkForBackgroundChanges(executionContext, onBackgroundChange, 2000, "cp_notifyparticipant");
    }
}

function onChangeNotifyReviewer(executionContext) {
    var formContext = executionContext.getFormContext();

    formContext.ui.clearFormNotification("notifyReviewerInProgress");

    if (formContext.getAttribute("cp_notifyreviewer").getValue() > 0) {
        formContext.ui.setFormNotification(
            "Generation of reviewer notification in progress.",
            "INFO",
            "notifyReviewerInProgress"
        );
        checkForBackgroundChanges(executionContext, onBackgroundChange, 2000, "cp_notifyreviewer");
    }
}

var typeFilter = "";
function filterTypesForUser(executionContext) {
    if (isReadOnly(executionContext)) return;

    Xrm.WebApi.retrieveMultipleRecords("cp_rprptype", "?$select=cp_rprptypeid&$expand=cp_RoleRequiredToCreate($select=name)").then(
        function success(result) {
            var allowedTypeIds = [];
            var filterRequired = false;
            for (var i = 0; i < result.entities.length; i++) {
                if (result.entities[i].cp_RoleRequiredToCreate == null || hasCurrentUserRole(result.entities[i].cp_RoleRequiredToCreate.name)) {
                    allowedTypeIds.push(result.entities[i].cp_rprptypeid);
                } else {
                    filterRequired = true;
                }
            }
            if (filterRequired) {
                typeFilter = "<filter type='and'><condition attribute='cp_rprptypeid' operator='in'>";
                for (var i = 0; i < allowedTypeIds.length; i++) {
                    typeFilter += "<value>" + allowedTypeIds[i] + "</value>";
                }
                typeFilter += "</condition></filter>";
                var formContext = executionContext.getFormContext();
                formContext.getControl("cp_type").addPreSearch(typePreSearch);
            }
        },
        function (error) {
            console.log(error.message);
        }
    );
}
function typePreSearch(executionContext) {
    if (typeFilter != "") {
        var formContext = executionContext.getFormContext();
        formContext.getControl("cp_type").addCustomFilter(typeFilter, "cp_rprptype");
    }
}

var categoryFilter = "";
function filterCategoriesForType(executionContext) {
    if (isReadOnly(executionContext)) return;
    var formContext = executionContext.getFormContext();

    var type = formContext.getAttribute("cp_type").getValue();
    if (type == null) {
        categoryFilter = "<filter type='and'><condition attribute='cp_type' operator='null'/></filter>";
    } else {
        categoryFilter = "<filter type='or'><condition attribute='cp_type' operator='null'/><condition attribute='cp_type' operator='eq' value='" + type[0].id  + "'/></filter>";
    }
}
function categoryPreSearch(executionContext) {
    if (categoryFilter != "") {
        var formContext = executionContext.getFormContext();
        formContext.getControl("cp_category").addCustomFilter(categoryFilter);
    }
}

function setUiState(executionContext, controlName, uiElementBehaviourValue) {
    var formContext = executionContext.getFormContext();

    var control = formContext.getControl(controlName);
    if (control == null) {
        throw "setUiState - control not on form: " + controlName;
    }

    var attribute = formContext.getAttribute(controlName);
    switch (uiElementBehaviourValue) {
        case 778230000 /* Hidden */:
            control.setVisible(false);
            control.setDisabled(true);
            if (attribute != null) {
                attribute.setRequiredLevel("none");
            }
            break;
        case 778230001 /* Required (Visible)*/:
            control.setVisible(true);
            control.setDisabled(false);
            if (attribute != null) {
                attribute.setRequiredLevel("required");
            }
            break;
        case 778230002 /* Optional (Visible)*/:
            control.setVisible(true);
            control.setDisabled(false);
            if (attribute != null) {
                attribute.setRequiredLevel("none");
            }
            break;
        case 778230003 /* Locked (Visible)*/:
            control.setVisible(true);
            control.setDisabled(true);
            if (attribute != null) {
                attribute.setRequiredLevel("none");
            }
            break;
    }
}

var isInternalReviewerChange = false;
var isDefaultReviewer = false;
function onChangeType(executionContext) {
    var formContext = executionContext.getFormContext();

    var type = formContext.getAttribute("cp_type").getValue();

    if (type != null) {
        Xrm.WebApi.retrieveRecord(type[0].entityType, type[0].id,
                "?$select=cp_appointreviewerbehaviour,cp_appropriateauthoritybehaviour,cp_categorybehaviour,cp_referencebehaviour,cp_referencelabel,cp_referencedefault,cp_defaultreviewerascreatedby").then(
            function success(result) {
                setAppointReviewerUiState(executionContext,
                    (result.cp_appointreviewerbehaviour > 778230000),
                    (result.cp_appointreviewerbehaviour == 778230001));

                setAppropriateAuthorityUiState(executionContext,
                    (result.cp_appropriateauthoritybehaviour > 778230000),
                    (result.cp_appropriateauthoritybehaviour == 778230001));

                setCategoryUiState(executionContext,
                    (result.cp_categorybehaviour > 778230000),
                    (result.cp_categorybehaviour == 778230001));

                if (result.cp_referencelabel != null) {
                    formContext.getControl("cp_name").setLabel(result.cp_referencelabel);
                } else {
                    formContext.getControl("cp_name").setLabel("Reference");
                }

                setUiState(executionContext, "cp_name", result.cp_referencebehaviour);

                if (formContext.ui.getFormType() == 1 /* Create */) {
                    if (result.cp_referencedefault != null) {
                        referenceTemplate = result.cp_referencedefault;
                        referenceTemplateEnabled = true;
                        setReferenceFromTemplate(executionContext);
                    } else {
                        referenceTemplate = null;
                        referenceTemplateEnabled = false;
                        if (isTemplatedReference) {
                            formContext.getAttribute("cp_name").setValue(null);
                            formContext.getAttribute("cp_name").fireOnChange();
                        }
                    }
                }

                isInternalReviewerChange = true;
                if (result.cp_defaultreviewerascreatedby) {
                    if (formContext.getAttribute("cp_reviewer").getValue() == null) {
                        var lookupValue = [];
                        lookupValue[0] = {};
                        lookupValue[0].id = Xrm.Utility.getGlobalContext().userSettings.userId;
                        lookupValue[0].name = Xrm.Utility.getGlobalContext().userSettings.userName;
                        lookupValue[0].entityType = "systemuser";

                        formContext.getAttribute("cp_reviewer").setValue(lookupValue);
                        formContext.getAttribute("cp_reviewer").fireOnChange();

                        isDefaultReviewer = true;
                    }
                } else if (isDefaultReviewer) {
                    formContext.getAttribute("cp_reviewer").setValue(null);
                    formContext.getAttribute("cp_reviewer").fireOnChange();

                    isDefaultReviewer = false;
                }
                isInternalReviewerChange = false;
            },
            function (error) {
                console.log(error.message);
            }
        );
    } else {
        setAppointReviewerUiState(executionContext, false, false);
        setAppropriateAuthorityUiState(executionContext, false, false);
    }

    filterCategoriesForType(executionContext);
}

var onChangeCallbacksByTemplatedAttribute = {};
function populateTemplateAttributes(executionContext, template, templatedAttributeChangedCallback) {
    var formContext = executionContext.getFormContext();

    var result = "";

    var processedIndex = 0;
    var placeholderStartIndex = template.indexOf("{");
    if (placeholderStartIndex < 0) {
        result = template;
    } else {
        while (placeholderStartIndex > -1) {
            var placeholderEndIndex = template.indexOf("}", placeholderStartIndex);
            if (placeholderEndIndex < placeholderStartIndex) {
                throw "populateTemplateAttributes - invalid template format: " + template;
            }

            //Add text up to start of next placeholder.
            result += template.substring(processedIndex, placeholderStartIndex);

            //Check if placeholder contains any literal text prefix to show if the attribute is not null.
            var placeholder = template.substring(placeholderStartIndex + 1, placeholderEndIndex);
            var embeddedStartIndex = placeholder.indexOf("{");
            var attributeName = "";
            var notNullPrefix = "";
            if (embeddedStartIndex > -1) {
                attributeName = placeholder.substring(embeddedStartIndex + 1);
                notNullPrefix = placeholder.substring(0, embeddedStartIndex);
            } else {
                attributeName = placeholder;
            }

            var attribute = formContext.getAttribute(attributeName);
            if (attribute != null) {
                var resolvedPlaceholder = attribute.getValue();
                if (resolvedPlaceholder != null) {
                    if (resolvedPlaceholder[0] != null) {
                        resolvedPlaceholder = resolvedPlaceholder[0].name;
                    }
                    resolvedPlaceholder = notNullPrefix + resolvedPlaceholder;
                } else {
                    resolvedPlaceholder = "";
                }
                result += resolvedPlaceholder;

                //Set up onChange callback if requested (without creating duplicates).
                if (templatedAttributeChangedCallback) {
                    var attributeOnChangeCallbacks = onChangeCallbacksByTemplatedAttribute[attributeName];
                    if (attributeOnChangeCallbacks == null) {
                        attribute.addOnChange(templatedAttributeChangedCallback);
                        onChangeCallbacksByTemplatedAttribute[attributeName] = [templatedAttributeChangedCallback];
                    } else {
                        var newCallback = true;
                        for (var index in attributeOnChangeCallbacks) {
                            if (attributeOnChangeCallbacks[index] == templatedAttributeChangedCallback) {
                                newCallback = false;
                                break;
                            }
                        }
                        if (newCallback) {
                            attribute.addOnChange(templatedAttributeChangedCallback);
                            onChangeCallbacksByTemplatedAttribute[attributeName].push(templatedAttributeChangedCallback);
                        }
                    }
                }
            } else {
                result += "{" + attributeName + "}";
            }

            processedIndex = placeholderEndIndex + 1;
            placeholderStartIndex = template.indexOf("{", processedIndex);
        }
    }

    return result;
}

var isTemplatedReference = false;
var referenceTemplateEnabled = false;
var referenceTemplate = null;
function setReferenceFromTemplate(executionContext) {
    var formContext = executionContext.getFormContext();

    if (referenceTemplateEnabled) {
        var reference = populateTemplateAttributes(executionContext, referenceTemplate, setReferenceFromTemplate);
        isTemplatedReference = true;

        internalReferenceChange = true;
        formContext.getAttribute("cp_name").setValue(reference);
        formContext.getAttribute("cp_name").fireOnChange();
        internalReferenceChange = false;
    }
}

var internalReferenceChange = false;
function onChangeReference(executionContext) {
    var formContext = executionContext.getFormContext();

    if (internalReferenceChange) return;

    isTemplatedReference = false;
    if (referenceTemplate != null) {
        var userReference = formContext.getAttribute("cp_name").getValue();
        if (userReference == null) {
            referenceTemplateEnabled = true;
            setReferenceFromTemplate(executionContext);
        } else {
            referenceTemplateEnabled = false;
        }
    }
}

var internalMeetingStatusChange = false;
function onChangeMeetingStatus(executionContext, isLoadOrPostSave) {
    var formContext = executionContext.getFormContext();
    if (isLoadOrPostSave !== true) isLoadOrPostSave = false;

    setAppointmentUiState(executionContext);

    var meetingStatus = formContext.getAttribute("cp_reviewmeetingstatus").getValue();
    var inProgress = (meetingStatus == 778230001 /* In Progress */);
    var completed = (meetingStatus == 778230002 /* Completed */);
    inProgressThisSession = ((!isLoadOrPostSave && inProgress) || 
        (inProgressThisSession && (inProgress || completed)));

    formContext.getControl("cp_participantsaccount").setDisabled(!inProgressThisSession);
    formContext.getControl("cp_discussionsummary").setDisabled(!inProgressThisSession);
    formContext.getControl("cp_developmentplan").setDisabled(!inProgressThisSession);
    formContext.getControl("cp_furtheractionsrequired").setDisabled(!inProgressThisSession);
    formContext.getControl("cp_nextsteps").setDisabled(!inProgressThisSession);
    formContext.getControl("cp_nextstepsfollowup").setDisabled(!inProgressThisSession);
    formContext.getControl("cp_nextstepsfollowupdate").setDisabled(!inProgressThisSession);

    formContext.getControl("cp_reflectivereviewstartedon").setDisabled(!inProgressThisSession);
    formContext.getControl("cp_reflectivereviewendedon").setDisabled(!inProgressThisSession);
    formContext.getControl("cp_reflectivereviewlocation").setDisabled(!inProgressThisSession);

    formContext.getAttribute("cp_discussionsummary").setRequiredLevel(inProgressThisSession ? "required" : "none");
    formContext.getAttribute("cp_developmentplan").setRequiredLevel(inProgressThisSession ? "required" : "none");
    formContext.getAttribute("cp_reflectivereviewstartedon").setRequiredLevel(inProgressThisSession ? "required" : "none");
    formContext.getAttribute("cp_reflectivereviewlocation").setRequiredLevel(inProgressThisSession ? "required" : "none");

    formContext.ui.tabs.get("tabReflectiveReview").sections.get("sectionParticipantResponse").setVisible(completed);

    formContext.ui.tabs.get("tabReflectiveReview").sections.get("sectionReflectiveReview").setVisible(inProgress || completed);

    if (!currentUserIsParticipant(formContext)) {
        //Process start/end meeting trigger.
        if (inProgress) {
            if (!isLoadOrPostSave && !internalMeetingStatusChange) {
                //Just switched to In Progress (in session).
                var startedOn = new Date();

                var rprp = { "cp_reviewmeetingstatus": 778230001 /* In Progress */, "cp_reflectivereviewstartedon": startedOn };
                Xrm.WebApi.updateRecord("cp_rprp", formContext.data.entity.getId(), rprp).then(
                    function success(result) {
                        formContext.getAttribute("cp_reflectivereviewstartedon").setValue(startedOn);
                        formContext.getAttribute("cp_reflectivereviewstartedon").fireOnChange();

                        if (formContext.getAttribute("cp_reflectivereviewendedon").getValue() == null) {
                            //First Review Meeting
                            formContext.getAttribute("cp_furtheractionsrequired").setValue(true);
                            formContext.getAttribute("cp_furtheractionsrequired").fireOnChange();
                        } else {
                            //Subsequent Review Meeting so clear fields which need to be. 
                            //(Leave main review fields the same as last review so can be amended.)
                            formContext.getAttribute("cp_reflectivereviewendedon").setValue(null);
                            formContext.getAttribute("cp_reflectivereviewendedon").fireOnChange();

                            formContext.getAttribute("cp_participantresponse").setValue(null);
                            formContext.getAttribute("cp_participantresponse").fireOnChange();

                            formContext.getAttribute("cp_participantrespondedon").setValue(null);
                            formContext.getAttribute("cp_participantrespondedon").fireOnChange();
                        }
                    },
                    function (error) {
                        console.log(error.message);
                    }
                );
            }
        } else if (completed) {
            if (!isLoadOrPostSave && !internalMeetingStatusChange) {
                //Just switched to Completed (in session).
                if (formContext.data.isValid()) {
                    if (formContext.getAttribute("cp_reflectivereviewendedon").getValue() == null) {
                        formContext.getAttribute("cp_reflectivereviewendedon").setValue(new Date());
                        formContext.getAttribute("cp_reflectivereviewendedon").fireOnChange();
                    }

                    var confirmStrings = {
                        text: "Once the meeting is ended data will be locked awaiting participant acceptance.\n" +
                            "If you have further edits to make choose Cancel and make them before ending the meeting. ",
                        title: "Are you sure you want to end this meeting?",
                        subtitle: "WARNING!",
                        cancelButtonLabel: "Cancel",
                        confirmButtonLabel: "End Meeting"
                    };
                    //var confirmOptions = { height: 200, width: 450 };
                    Xrm.Navigation.openConfirmDialog(confirmStrings/*, confirmOptions*/).then(
                        function (success) {
                            if (success.confirmed) {
                                formContext.data.save().then(
                                    function () { },
                                    function () {
                                        //Failed to save End Meeting so switch back to In Progress.
                                        setMeetingInProgress(executionContext);
                                    }
                                );
                            } else {
                                //Cancelled End Meeting so switch back to In Progress.
                                setMeetingInProgress(executionContext);
                            }
                        });
                } else {
                    //Not valid for save so switch back to In Progress.
                    setMeetingInProgress(executionContext);
                }
            }
        }
    }
}

function setMeetingInProgress(executionContext) {
    var formContext = executionContext.getFormContext();

    internalMeetingStatusChange = true;
    formContext.getAttribute("cp_reviewmeetingstatus").setValue(778230001 /* In Progress */);
    formContext.getAttribute("cp_reviewmeetingstatus").fireOnChange();
    //fireOnChange not retriggering onChangeMeetingStatus in all scenarios so invoke it explicitly.
    onChangeMeetingStatus(executionContext);
    internalMeetingStatusChange = false;
    formContext.ui.refreshRibbon(false);
}

function onChangeFurtherActionsRequired(executionContext, isLoad) {
    var formContext = executionContext.getFormContext();

    if (isLoad != true) isLoad = false;

    var furtherActionsRequired = formContext.getAttribute("cp_furtheractionsrequired").getValue();
    formContext.getAttribute("cp_nextsteps").setRequiredLevel(furtherActionsRequired ? "required" : "none");
    formContext.getControl("cp_nextsteps").setVisible(furtherActionsRequired);

    if (!isLoad && !isReadOnly(executionContext)) {
        formContext.getAttribute("cp_nextstepsfollowup").setValue(furtherActionsRequired);
        formContext.getAttribute("cp_nextstepsfollowup").fireOnChange();
    }
}

function onChangeNextStepsFollowUp(executionContext) {
    var formContext = executionContext.getFormContext();

    var nextStepsFollowUp = formContext.getAttribute("cp_nextstepsfollowup").getValue();
    formContext.getAttribute("cp_nextstepsfollowupdate").setRequiredLevel(nextStepsFollowUp ? "required" : "none");
    formContext.getControl("cp_nextstepsfollowupdate").setVisible(nextStepsFollowUp);
}

function onChangeReviewer(executionContext) {
    var formContext = executionContext.getFormContext();
    if (!isInternalReviewerChange) {
        isDefaultReviewer = false;
    }
    setReviewerNotification(executionContext);
    setAppointReviewerUiState(executionContext);
}

function onChangeConsultedOn(executionContext) {
    var formContext = executionContext.getFormContext();

    setAppointReviewerUiState(executionContext);
}

function onChangeStatusReason(executionContext) {
    var formContext = executionContext.getFormContext();

    if (formContext.getAttribute("statuscode").getValue() == 778230002 /* Awaiting Participant Acceptance */) {
        checkForBackgroundChanges(executionContext, onBackgroundChange, 2000, "modifiedon", "participantResponseBackgroundChange");
    }
    lockFieldsPostReviewMeeting(executionContext);
}

function onChangeParticipantResponse(executionContext) {
    var formContext = executionContext.getFormContext();

    lockFieldsPostReviewMeeting(executionContext);
}

function onChangeCategory(executionContext) {
    var formContext = executionContext.getFormContext();

    var category = formContext.getAttribute("cp_category").getValue();
    var isOtherCategory = (category != null && category[0].name.indexOf("Other") == 0);

    formContext.getControl("cp_categoryother").setVisible(isOtherCategory);
    formContext.getAttribute("cp_categoryother").setRequiredLevel(isOtherCategory ? "required" : "none");
}