parameters:
- name: solutionName
  type: string
- name: folderNames
  type: string
- name: managed
  type: string
- name: solutionprefix
  type: string
- name: minorversion
  type: string
- name: releaseversion
  type: string
- name: customerName
  type: string
- name: environmentName
  type: string


steps:

  - powershell: |
                $folderExists = Test-Path -Path 'Schema/${{parameters.solutionName}}${{parameters.solutionprefix}}/unpacked'
                Write-Output "##vso[task.setvariable variable=FolderExists]$folderExists"
    displayName: Check schema folder exists

#if this is not a base level solution, copy in the environment specific folder generated in the rewrite step

  - ${{ if and(startsWith(parameters.solutionName,'Flows'), ne(parameters.customerName, 'Base')) }}:
    - task: CopyFiles@2
      displayName: Copy Rewritten Flows over Schema
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)\RewrittenFlows\${{parameters.customerName}}\${{parameters.environmentName}}\Schema'
        contents: '**' 
        targetFolder: '$(Build.SourcesDirectory)\Schema'
        overWrite: true 
      condition: eq(variables['FolderExists'], True)

  - ${{ if and(startsWith(parameters.solutionName,'CanvasApps'), ne(parameters.customerName, 'Base')) }}:
    - task: CopyFiles@2
      displayName: Copy Rewritten CanvasApps over Schema
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)\RewrittenCanvasApps\${{parameters.customerName}}\${{parameters.environmentName}}\Schema'
        contents: '**' 
        targetFolder: '$(Build.SourcesDirectory)\Schema'
        overWrite: true 
      condition: eq(variables['FolderExists'], True)


  - task: MSCRMPackSolution@10
    displayName: 'Pack - ${{parameters.solutionName}}'
    inputs:
      unpackedFilesFolder: 'Schema/${{parameters.solutionName}}${{parameters.solutionprefix}}/unpacked'
      packageType: ${{parameters.managed}}
      includeVersionInSolutionFile: true
    condition: eq(variables['FolderExists'], True)



 
#if this is not a base level solution, copy it to the environemnt specific folder, and then delete the base version

  - ${{ if ne(parameters.customerName, 'Base') }}:

    - powershell: |
                $GeneratedSolutionFile = get-childitem -path "$(Build.BinariesDirectory)/${{parameters.solutionprefix}}${{parameters.solutionName}}_1_${{parameters.minorversion}}_${{parameters.releaseversion}}_*_managed.zip"
                $GeneratedSolutionFileName = $GeneratedSolutionFile.Name
                Write-Host "##vso[task.setvariable variable=GeneratedSolutionFileName]$GeneratedSolutionFileName"
      condition: eq(variables['FolderExists'], True)
      displayName: Get solution file name

    - task: CopyFiles@2
      displayName: Copy to Customer/Env folder        
      inputs:
        sourceFolder: '$(Build.BinariesDirectory)'
        contents: '$(GeneratedSolutionFileName)' 
        targetFolder: '$(Build.BinariesDirectory)\${{parameters.customerName}}\${{parameters.environmentName}}'
        overWrite: true 
        flattenFolders: true
      condition: eq(variables['FolderExists'], True)

    - task: DeleteFiles@1
      displayName: Delete original solution file
      inputs:
        sourceFolder: '$(Build.BinariesDirectory)'
        Contents: '$(GeneratedSolutionFileName)' 
      condition: eq(variables['FolderExists'], True)

 

  #- task: Dynamics Solution Checker@0
  #  displayName: 'Check ${{parameters.solutionName}} Solution'
  #  inputs:
  #    schemaFolder: '$(Build.StagingDirectory)/Schema'
  #    solutionName: ${{parameters.solutionName}}
  #    validFolderNames : ${{parameters.folderNames}}